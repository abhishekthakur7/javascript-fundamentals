1. Hello world:

- We can use a <script> tag to add JavaScript code to a page.
- The type and language attributes are not required in HTML 5

- A script in an external file can be inserted with <script src="path/to/script.js"></script>.
    - The benefit of a separate file is that the browser will download it and store it in its cache.
    - Other pages that reference the same script will take it from the cache instead of downloading it, so the file is actually downloaded only once.
    - That reduces traffic and makes pages faster.

---------------------------------------xxxxxxxxxxx-----------------------------------------------
2. Code structure

- A semicolon may be omitted in most cases when a line break exists.
  However:::
    Compiler will fail to auto assume semi colon in case of:
        alert("There will be an error")
        [1, 2].forEach(alert)
    Because, JS don't auto assume semicolon before []

- Nested comments are not supported!
  There may not be /*...*/ inside another /*...*/.
  Such code will die with an error.

-----------------------------------------xxxxxxxxxxx-----------------------------------------------
3. Use strict --> To keep the old code working, most modifications are off by default. 
                  You need to explicitly enable them with a special directive: "use strict".

- The directive looks like a string: "use strict" or 'use strict'. 
  When it is located at the top of a script, the whole script works the “modern” way.

- "use strict" can be put at the start of most kinds of functions instead of the whole script. 
   Doing that enables strict mode in that function only. But usually, people use it for the whole script.
      - Please make sure that "use strict" is at the top of your scripts, otherwise strict mode may not be enabled.
      - Only comments may appear above "use strict".

- There’s no way to cancel use strict
  There is no directive like "no use strict" that reverts the engine to old behavior.
  Once we enter strict mode, there’s no return.

- Browser console
  For the future, when you use a browser console to test features, please note that it 
  doesn’t use strict by default.
  Even if we press Shift+Enter to input multiple lines, and put use strict on top, it doesn’t work. 
  That’s because of how the console executes the code internally.
  The reliable way to ensure use strict would be to input the code into console like this:

  (function() {
  'use strict';
    // ...your code...
  })()

- Several language features, like “classes” and “modules”, enable strict mode automatically.
  Strict mode is supported by all modern browsers.

-------------------------------------------xxxxxxxxxxx---------------------------------------------

4. Variables

- To create a variable in JavaScript, use the 'let' keyword.
- let – is a modern variable declaration. The code must be in strict mode to use let in Chrome (V8).
- In older scripts, you may also find another keyword: var instead of let
- The var keyword is almost the same as let. It also declares a variable, but in a slightly different, “old-school” way.

-- Functional languages
   - It’s interesting to note that functional programming languages, like Scala or Erlang, forbid changing 
     variable values.
   - In such languages, once the value is stored “in the box”, it’s there forever. If we need to store 
     something else, the language forces us to create a new box (declare a new variable). We can’t reuse the old one.
   - Though it may seem a little odd at first sight, these languages are quite capable of serious development.
     More than that, there are areas like parallel computations where this limitation confers certain 
     benefits. Studying such a language (even if you’re not planning to use it soon) is recommended to 
     broaden the mind.

- There are two limitations on variable names in JavaScript:
  1. The name must contain only letters, digits, or the symbols $ and _.
  2. The first character must not be a digit.

- When the name contains multiple words, camelCase is commonly used.
- Case Sensitive - Variables named apple and AppLE are two different variables.

- Reserved keywords - which cannot be used as variables
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords

- Variable declaration - Normally, we need to define a variable before using it. But in the old times, it was technically possible 
  to create a variable by a mere assignment of the value without using let. This still works now if we don’t
  put use strict in our scripts to maintain compatibility with old scripts.

- To declare a constant (unchanging) variable, use const instead of let
     - Capital-named constants are only used as aliases for “hard-coded” values.

--------------------------------------------------xxxxxxxxxxx------------------------------------------------------
5. DataTypes

- Besides regular numbers, there are so-called “special numeric values” which also belong to this 
  data type: Infinity, -Infinity and NaN
     - 'Infinity' -> represents the mathematical Infinity ∞. It is a special value that’s greater than any number.
     - 'NaN' -> (Full form "Not a Number") represents a computational error. It's type is "number". It is a result of an incorrect or an undefined mathematical operation, for instance:
            alert( "not a number" / 2 ); // NaN, such division is erroneous

- A string in JavaScript must be surrounded by quotes.
      In JavaScript, there are 3 types of quotes.
      - Double quotes: "Hello".
      - Single quotes: 'Hello'.
      - Backticks: `Hello`.

      Backticks are “extended functionality” quotes. They allow us to embed variables and expressions into a 
      string by wrapping them in ${…}, for example:

      let name = "John";
      // embed a variable
      alert( `Hello, ${name}!` ); // Hello, John!

- In JavaScript, 'null' is not a “reference to a non-existing object” or a “null pointer” like in some other 
  languages. It’s just a "special value" which represents “nothing”, “empty” or “value unknown”.

- The special value 'undefined' also stands apart. It "makes a type of its own", just like null.
  The meaning of undefined is “value is not assigned”.
  If a variable is declared, but not assigned, then its value is undefined:
  let x;
  alert(x); // shows "undefined"

- Technically, it is possible to assign undefined to any variable. But we don’t recommend doing that. 
  Normally, we use null to assign an “empty” or “unknown” value to a variable, and we use undefined for 
  checks like seeing if a variable has been assigned.


- The object type is special.
  All other types (number, String, boolean) are called “primitive” because their values can contain only a single thing (be it a string or a number or 
  whatever). In contrast, objects are used to store collections of data and more complex entities.

- The 'symbol' type is used to create unique identifiers for objects.

- The typeof operator returns the type of the argument. It’s useful when we want to process values of different types differently or just want to do a quick check.
      - It supports two forms of syntax:
          - As an operator: typeof x.
          - As a function: typeof(x).
  In other words, it works with parentheses or without them. The result is the same.
  The call to typeof x returns a string with the type name:
  
  *TIP:
  Normally typeof [] returns "object" for all object types which is almost useless information. A better typeof:
  const objType = obj => Object.prototype.toString.call(obj);
  Use like this:
  objType([]); // returns "[object Array]"

  typeof undefined // "undefined"
  typeof 0 // "number"
  typeof true // "boolean"
  typeof "foo" // "string"
  typeof Symbol("id") // "symbol"
  typeof Math // "object"
  typeof arguments //"object"
  typeof undefined //"undefined"
  typeof NaN //"number" ************ use isNaN(value) to check if some value is NaN or not
  typeof null // "object"
  typeof alert // "function"

  **Important explanations for last 2:
     --> The result of typeof null is "object". That’s wrong. It is an officially recognized error in typeof, kept for 
         compatibility. Of course, null is not an object. It is a special value with a separate type of its own. 
         So, again, this is an error in the language.
    
     --> The result of typeof alert is "function", because alert is a function of the language. We’ll study functions in 
         the next chapters where we’ll see that there’s no special “function” type in JavaScript. Functions belong to the 
         object type. But typeof treats them differently. Formally, it’s incorrect, but very convenient in practice.

- Summary ::::
  There are 7 basic types in JavaScript.

  1. "number" for numbers of any kind: integer or floating-point.
  2. "string" for strings. A string may have one or more characters, there’s no separate single-character type.
  3. "boolean" for true/false.
  4. "null" for unknown values – a standalone type that has a single value null.
  5. "undefined" for unassigned values – a standalone type that has a single value undefined.
  6. "object" for more complex data structures.
  7. "symbol" for unique identifiers.

  The typeof operator allows us to see which type is stored in a variable.
    - Two forms: typeof x or typeof(x).
    - Returns a string with the name of the type, like "string".
    - For null returns "object" – this is an error in the language, it’s not actually an object.

------------------------------------------------------xxxxxxxxxxx---------------------------------------
6. Type Conversions

- ToString:::::
   - We can call the "String(value)" function to convert a value to a string:
        value = String(value); // now value is a string "true"
        alert(typeof value); // string

   *** String conversion is mostly obvious. A false becomes "false", null becomes "null", etc.
    
- ToNumber:::::
   - Numeric conversion happens in mathematical functions and expressions automatically.
     For example:
         - alert( "6" / "2" ); // 3, strings are converted to numbers
   
    - We can use the "Number(value)" function to explicitly convert a value to a number:
      let str = "123";
      alert(typeof str); // string
      let num = Number(str); // becomes a number 123
      alert(typeof num); // number

    - Explicit conversion is usually required when we read a value from a string-based source like a 
      text form but expect a number to be entered.
      If the string is not a valid number, the result of such a conversion is NaN. For instance:
      let age = Number("an arbitrary string instead of a number");
      alert(age); // NaN, conversion failed

    *** Numeric conversion rules:
        Value	Becomes…
        undefined       -->	NaN
        null            -->	0
        true and false 	--> 1 and 0
        string          --> Whitespaces from the start and end are removed. If the remaining string is 
                            empty, the result is 0. Otherwise, the number is “read” from the string. 
                            An error gives NaN.

        Examples:
            alert( Number("   123   ") ); // 123
            alert( Number("123z") );      // NaN (error reading a number at "z")
            alert( Number(true) );        // 1
            alert( Number(false) );       // 0

    *** TIP::::
        - Almost all mathematical operations convert values to numbers. A notable exception is addition +. 
          If one of the added values is a string, the other one is also converted to a string. 
          Example:
          alert ( 1 + '2' ); //12

- ToBoolean::::::
   - Can be performed with "Boolean(value)".
     Follows the rules:
     Value	Becomes…
     0, null, undefined, NaN, ""                                             ----->	false
     any other value (number +ve or -ve/non empty string/space-only string)	 -----> true

-- SUMMARY:
    -> true + false;  //1
    -> "" + 1 + 0;    //10
    -> "" - 1 + 0;    //-1
    -> 4 + 5 + "px";  //45px
    -> "$" + 4 + 5;   //$45
    -> "4px" - 2;     //NaN - It will fail to convert 4px to Number
    -> "  -9  " + 5;  //"  -9  5"
    -> null + 1;      //1 - Because null is 0 in terms of numbers
    -> undefined + 1; //NaN - Because undefined is NaN in terms of numbers
    -> '2'+'2'-'2';   //20 - '22' - '2' = 20
    -> true+1;        //2 - true is converted to number i.e. 1
    -> "-9\n" + 5;    //"-9\n5"
    -> "-9\n"-5;      //-14 - \n is new line character, and after evaluating it will become like:
                         "-9"
                         -5
                         Which is same as "-9"-5 for JS, so result is -14

-------------------------------------------------xxxxxxxxxxx---------------------------------------------

7. Operators

- The plus + exists in two forms: the binary form that we used above and the unary form.
  The unary plus or, in other words, the plus operator + applied to a single value, doesn’t do anything 
  to numbers. But if the operand is not a number, the unary plus converts it into a number.

  For example:
  // No effect on numbers
  let x = 1;
  alert( +x ); // 1

  let y = -2;
  alert( +y ); // -2

  // Converts non-numbers
  alert( +true ); // 1
  alert( +"" );   // 0

- It actually does the same thing as Number(...), but is shorter.

- Operator precedence:::
     - BODMAS
     - Parentheses override any precedence, so if we’re not satisfied with the implicit order,
       we can use them to change it. For example: (1 + 2) * 2.
  
  *** The “unary plus” has a priority of 16 which is higher than the 13 of “addition” (binary plus). 
     That’s why, in the expression "+apples + +oranges", unary pluses work before the addition.

    - Let’s note that an assignment = is also an operator. It is listed in the precedence table with the 
      very low priority of 3.
           -  An operator always returns a value. That’s obvious for most of them like addition + or 
              multiplication *. But the assignment operator follows this rule too.
              The call x = value writes the value into x and then returns it.
              For example:
              let a = 1;
              let b = 2;
              let c = 3 - (a = b + 1); 
              alert( a ); // 3
              alert( c ); // 0

  - Important:
       - Increment/decrement can only be applied to variables. Trying to use it on a value like 5++ will
         give an error.

 - Modify-and-assign operator:
    operators exist for all arithmetical and bitwise operators: /=, -=, etc.
    Such operators have the same precedence as a normal assignment, so they run after most other calculations:
    let n = 2;
    n *= 3 + 5;
    alert( n ); // 16  (right part evaluated first, same as n *= 8)

 - Comma Operator:
     - The comma operator , is one of the rarest and most unusual operators. Sometimes, it’s used to write 
       shorter code, so we need to know it in order to understand what’s going on.
       The comma operator allows us to evaluate several expressions, dividing them with a comma ,.
       Each of them is evaluated but only the result of the last one is returned.
       For example:
        - let a = (1 + 2, 3 + 4);
        - alert( a ); // 7 (the result of 3 + 4)
        Here, the first expression 1 + 2 is evaluated and its result is thrown away. Then, 3 + 4 is 
        evaluated and returned as the result.
      
      **Comma has a very low precedence
          - Please note that the comma operator has very low precedence, lower than =, so parentheses are 
            important in the example above.
          - Without them: a = 1 + 2, 3 + 4 evaluates + first, summing the numbers into a = 3, 7, then the
            assignment operator = assigns a = 3, and finally the number after the comma, 7, is not processed
            so it’s ignored.

          - Why do we need an operator that throws away everything except the last part?
            Sometimes, people use it in more complex constructs to put several actions in one line.
            For example:
              - // three operations in one line
                for (a = 1, b = 3, c = a * b; a < 10; a++) {
                ...
                }

--------------------------------------------------xxxxxxxxxxx---------------------------------------------------
8. Comparisons

  - String comparison
      - To see whether a string is greater than another, JavaScript uses the so-called “dictionary” or “lexicographical” 
        order.
      - In other words, strings are compared letter-by-letter.
      For example:
      alert( 'Z' > 'A' ); // true
      alert( 'Glow' > 'Glee' ); // true
      alert( 'Bee' > 'Be' ); // true

     - The algorithm to compare two strings is simple:
          1. Compare the first character of both strings.
          2. If the first character from the first string is greater (or less) than the other string’s, then the first string is greater (or less) than the second. We’re done.
          3. Otherwise, if both strings’ first characters are the same, compare the second characters the same way.
          4. Repeat until the end of either string.
          5. If both strings end at the same length, then they are equal. Otherwise, the longer string is greater.
      
     - A capital letter "A" is not equal to the lowercase "a". Which one is greater? The lowercase "a". Why? 
       Because the lowercase character has a greater index in the internal encoding table JavaScript uses (Unicode).

  - Comparison of different types
      - When comparing values of different types, JavaScript converts the values to numbers.
        For example:
        alert( '2' > 1 ); // true, string '2' becomes a number 2
        alert( '01' == 1 ); // true, string '01' becomes a number 1

      - For boolean values, true becomes 1 and false becomes 0.
        For example:
        alert( true == 1 ); // true
        alert( false == 0 ); // true

      *** A funny consequence:
          It is possible that at the same time:
          Two values are equal.
          One of them is true as a boolean and the other one is false as a boolean.
          For example:
          let a = 0;
          alert( Boolean(a) ); // false
          let b = "0";
          alert( Boolean(b) ); // true
          alert(a == b); // true!

          From JavaScript’s standpoint, this result is quite normal. An equality check converts values using the numeric 
          conversion (hence "0" becomes 0), while the explicit Boolean conversion uses another set of rules.

  - Strict equality (===)
      - A regular equality check == has a problem. It cannot differentiate 0 from false:
        alert( 0 == false ); // true
        The same thing happens with an empty string:
        alert( '' == false ); // true

      - What to do if we’d like to differentiate 0 from false?
        A strict equality operator === checks the equality without type conversion.
        In other words, if a and b are of different types, then a === b immediately returns false without an attempt to 
        convert them.

  - Comparison with null and undefined
      - alert( null === undefined ); // false
      - There’s a special rule. These two are a “sweet couple”: they equal each other (in the sense of ==), but not 
        any other value.
        alert( null == undefined ); // true
      - For maths and other comparisons < > <= >=
        null/undefined are converted to numbers: null becomes 0, while undefined becomes NaN.
      - Strange result: null vs 0
        Let’s compare null with a zero:
        alert( null > 0 );  // (1) false
        alert( null == 0 ); // (2) false
        alert( null >= 0 ); // (3) true

        For second: The equality check == for undefined and null is defined such that, without any conversions, they equal 
        each other and don’t equal anything else. That’s why (2) null == 0 is false.

      - An incomparable undefined
        The value undefined shouldn’t be compared to other values:
        alert( undefined > 0 ); // false (1)
        alert( undefined < 0 ); // false (2)
        alert( undefined == 0 ); // false (3)
        - Comparisons (1) and (2) return false because undefined gets converted to NaN and NaN is a special numeric value 
          which returns false for all comparisons.
        - The equality check (3) returns false because undefined only equals null and no other value.

    *** Be careful when using comparisons like > or < with variables that can occasionally be null/undefined. 
        Checking for null/undefined separately is a good idea.

    SUMMARY:
      -> 5 > 4 → true
      -> "apple" > "pineapple" → false
      -> "2" > "12" → true -> String on both sides so string comparison is used.
      -> undefined == null → true
      -> undefined === null → false
      -> null == null -> true
      -> undefined == undefined -> true
      -> null == "\n0\n" → false
      -> null === +"\n0\n" → false
      -> 8>6>5; -> 8>6 returns true, true > 5 i.e. 1 > 5 = false 

------------------------------------------------------------xxxxxxxxxxx-------------------------------------------------

9. Interaction: alert, prompt, confirm

- alert
     - This shows a message and pauses script execution until the user presses “OK”.

- prompt
     - The function prompt accepts two arguments:
        result = prompt(title, [default]);
        It shows a modal window with a text message, an input field for the visitor, and the buttons OK/CANCEL.
        :title:
            - The text to show the visitor.
        :default:
            - An optional second parameter, the initial value for the input field.
            - The visitor may type something in the prompt input field and press OK. Or they can cancel the input by 
              pressing CANCEL or hitting the Esc key.
            - The call to prompt returns the text from the input field or null if the input was canceled.
            - For instance:
              let age = prompt('How old are you?', 100);
              alert(`You are ${age} years old!`); // You are 100 years old!

- confirm
     - The syntax:
        result = confirm(question);
        The function confirm shows a modal window with a question and two buttons: OK and CANCEL.
        The result is true if OK is pressed and false otherwise.
        For example:
        let isBoss = confirm("Are you the boss?");
        alert( isBoss ); // true if OK is pressed

----------------------------------------------------------------xxxxxxxxxxx----------------------------------------------

10. Logical operators
      - Precedence of AND && is higher than OR ||
          - The precedence of AND && operator is higher than OR ||.
          - So the code a && b || c && d is essentially the same as if the && expressions were in parentheses: 
            (a && b) || (c && d).

          - A double NOT !! is sometimes used for converting a value to boolean type:
              - alert( !!"non-empty string" ); // true
                alert( !!null ); // false
                That is, the first NOT converts the value to boolean and returns the inverse, and the second NOT inverses 
                it again. In the end, we have a plain value-to-boolean conversion.

          - There’s a little more verbose way to do the same thing – a built-in Boolean function:
              - alert( Boolean("non-empty string") ); // true
                alert( Boolean(null) ); // false
                The precedence of NOT ! is the highest of all logical operators, so it always executes first, before && 
                or ||.
    SUMMARY:
      - alert( null || 2 || undefined ); //2
      - alert( alert(1) || 2 || alert(3) ); //The answer: first 1, then 2.
      - alert( 1 && null && 2 ); //null
      - alert( alert(1) && alert(2) ); //undefined  --> because alert(1) returns undefined and undefined is false
      - alert( null || 2 && 3 || 4 ); //3  --> When all values are truthy, the last value is returned

----------------------------------------------------------------xxxxxxxxxxx-----------------------------------------------

11. Loops: while and for
		- Summary
			We covered 3 types of loops:

			while – The condition is checked before each iteration.
			do..while – The condition is checked after each iteration.
			for (;;) – The condition is checked before each iteration, additional settings available.
			To make an “infinite” loop, usually the while(true) construct is used. Such a loop, just like any other, can be stopped with the break directive.

			If we don’t want to do anything in the current iteration and would like to forward to the next one, we can use the continue directive.

			break/continue support labels before the loop. A label is the only way for break/continue to escape a nested loop to go to an outer one.
			
---------------------------------------------------------------xxxxxxxxxxx-------------------------------------------------

12. Functions
	- A variable declared inside a function is only visible inside that function.
	- A function can access an outer variable as well, The function has full access to the outer variable. It can modify it as well.
	- Global variables
        - Variables declared outside of any function, such as the outer userName in the code above, are called global.
		- Global variables are visible from any function (unless shadowed by locals).
		- Usually, a function declares all variables specific to its task. Global variables only store project-level data, 
		  and it’s important that these variables are accessible from anywhere. Modern code has few or no globals. Most variables reside 
		  in their functions.
	- Default values
		- If a parameter is not provided, then its value becomes undefined.
		- For instance, the aforementioned function showMessage(from, text) can be called with a single argument:
			showMessage("Ann");
		- That’s not an error. Such a call would output "Ann: undefined". There’s no text, so it’s assumed that text === undefined.
		  If we want to use a “default” text in this case, then we can specify it after =:
                function showMessage(from, text = "no text given") {  OR function showMessage(from, text = anotherFunction()) {
				alert( from + ": " + text );
				}
				showMessage("Ann"); // Ann: no text given
				
		- Default parameters old-style
			- Old editions of JavaScript did not support default parameters. So there are alternative ways to support them, 
			  that you can find mostly in the old scripts.
			  For instance, an explicit check for being undefined:
				function showMessage(from, text) {
					if (text === undefined) {
					text = 'no text given';
				}
				alert( from + ": " + text );
				}
			…Or the || operator:
				function showMessage(from, text) {
				// if text is falsy then text gets the "default" value
				text = text || 'no text given';
				...
				}     
				
		- Never add a newline between return and the value, because JS will assume semicolon after return and empty return will be there.
		- Function naming:
			- A name should clearly describe what the function does. When we see a function call in the code, a good name instantly 
			  gives us an understanding what it does and returns.
			- A function is an action, so function names are usually verbal.
			- There exist many well-known function prefixes like create…, show…, get…, check… and so on. Use them to hint what a function does.

-----------------------------------------------------------------xxxxxxxxxxx------------------------------------------------------------

13. Function expressions and arrows
    - In JavaScript, a function is not a “magical language structure”, but a special kind of value.
    - There is another syntax for creating a function that is called a Function Expression.
        It looks like this:
        let sayHi = function() {
          alert( "Hello" );
        };
    - We can copy a function to another variable:
      function sayHi() {   // (1) create
        alert( "Hello" );
      }
      let func = sayHi;    // (2) copy
      func(); // Hello     // (3) run the copy (it works)!
      sayHi(); // Hello    //     this still works too (why wouldn't it)

    - ::: Callback functions :::
      - We’ll write a function ask(question, yes, no) with three parameters:
        question  
        Text of the question
        yes
        Function to run if the answer is “Yes”
        no
        Function to run if the answer is “No”
        The function should ask the question and, depending on the user’s answer, call yes() or no():
          function ask(question, yes, no) {
            if (confirm(question)) yes()
            else no();
          }

          function showOk() {
            alert( "You agreed." );
          }

          function showCancel() {
            alert( "You canceled the execution." );
          }
          // usage: functions showOk, showCancel are passed as arguments to ask
          ask("Do you agree?", showOk, showCancel);

          - The arguments of ask are called callback functions or just callbacks.
          - The idea is that we pass a function and expect it to be “called back” later if necessary. 
          - In our case, showOk becomes the callback for the “yes” answer, and showCancel for the “no” answer.

        -- Function Expression vs Function Declaration::::
            - A Function Expression is created when the execution reaches it and is usable from then on.
            - A Function Declaration is usable in the whole script/code block. - In other words, when JavaScript 
              prepares to run the script or a code block, it first looks for Function Declarations in it and creates 
              the functions. We can think of it as an “initialization stage”.

        -- Arrow functions
             - There’s one more very simple and concise syntax for creating functions, that’s often better than Function Expressions. 
             - It’s called “arrow functions”, because it looks like this:
             - let func = (arg1, arg2, ...argN) => expression

        -- SUMMAY
            - Functions are values. They can be assigned, copied or declared in any place of the code.
            - If the function is declared as a separate statement in the main code flow, that’s called a “Function Declaration”.
            - If the function is created as a part of an expression, it’s called a “Function Expression”.
            - Function Declarations are processed before the code block is executed. They are visible everywhere in the block.
            - Function Expressions are created when the execution flow reaches them.
