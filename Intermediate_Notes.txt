1. Objects -
      - An object can be created with figure brackets {…} with an optional list of properties. A property is a “key: value” pair, where           key is a string (also called a “property name”), and value can be anything.
      - An empty object (“empty cabinet”) can be created using one of two syntaxes:
           - let user = new Object(); // "object constructor" syntax
           OR
           - let user = {};  // "object literal" syntax
           
      - Literals and properties
          - We can immediately put some properties into {...} as “key: value” pairs:
                let user = {     // an object
                  name: "John",  // by key "name" store value "John"
                  age: 30        // by key "age" store value 30
                };
          - Property values are accessible using the dot notation:
                // get fields of the object:
                alert( user.name ); // John
                alert( user.age ); // 30
           - To remove a property, we can use delete operator:
                delete user.age;
           - We can also use multiword property names, but then they must be quoted:
                let user = {
                  name: "John",
                  age: 30,
                  "likes birds": true  // multiword property name must be quoted
                };
            - The last property in the list may end with a comma:
                  let user = {
                    name: "John",
                    age: 30,
                   }
               That is called a “trailing” or “hanging” comma. Makes it easier to add/remove/move around properties, 
               because all lines become alike. 
      - Square brackets
                For multiword properties, the dot access doesn’t work:
                // this would give a syntax error
                user.likes birds = true
            - That’s because the dot requires the key to be a valid variable identifier. That is: no spaces and other limitations.
                There’s an alternative “square bracket notation” that works with any string:
                let user = {};
                // set
                user["likes birds"] = true;
             - Square brackets also provide a way to obtain the property name as the result of any expression – as opposed to a literal                string – like from a variable as follows:
               let key = "likes birds";
               // same as user["likes birds"] = true;
               user[key] = true;
               
      - Computed properties
           - We can use square brackets in an object literal. That’s called computed properties.
           - For instance:
              let fruit = prompt("Which fruit to buy?", "apple");
              let bag = {
                [fruit]: 5, // the name of the property is taken from the variable fruit
              };
              alert( bag.apple ); // 5 if fruit="apple"
              
      ** Reserved words are allowed as property names
         A variable cannot have a name equal to one of language-reserved words like “for”, “let”, “return” etc.
         But for an object property, there’s no such restriction. Any name is fine
         
      - Property value shorthand
           - The use-case of making a property from a variable is so common, that there’s a special property value shorthand to make it              shorter.
             Instead of name:name we can just write name, like this:
             function makeUser(name, age) {
               return {
                 name, // same as name: name
                 age   // same as age: age
                 // ...
               };
             }
