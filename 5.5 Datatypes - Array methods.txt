--> Array methods:

    Arrays provide a lot of methods. To make things easier, in this chapter they are split into groups:

    --> Add/remove items:

        1. push
        2. pop
        3. shift
        4. unshift

        5. splice:
                The arrays are objects, so we can try to use delete:
                    let arr = ["I", "go", "home"];
                    delete arr[1]; // remove "go"
                    alert( arr[1] ); // undefined
                    // now arr = ["I",  , "home"];
                    alert( arr.length ); // 3
                The element was removed, but the array still has 3 elements, we can see that arr.length == 3.

                So, special methods should be used.
                The arr.splice(str) method is a swiss army knife for arrays. It can do everything: insert, remove and replace elements.
                The syntax is:
                    arr.splice(index[, deleteCount, elem1, ..., elemN])
                It starts from the position index: removes deleteCount elements and then inserts elem1, ..., elemN at their place.
                Returns the array of removed elements.
                For example we remove 3 elements and replace them with the other two:
                    let arr = ["I", "study", "JavaScript", "right", "now"];
                    // remove 3 first elements and replace them with another
                    arr.splice(0, 3, "Let's", "dance");
                    alert( arr ) // now ["Let's", "dance", "right", "now"]
                The splice method is also able to insert the elements without any removals. For that we need to set deleteCount
                to 0:
                    let arr = ["I", "study", "JavaScript"];
                    // from index 2
                    // delete 0
                    // then insert "complex" and "language"
                    arr.splice(2, 0, "complex", "language");
                    alert( arr ); // "I", "study", "complex", "language", "JavaScript"

    A cheatsheet of array methods:

        To add/remove elements:
          push(...items) – adds items to the end,
          pop() – extracts an item from the end,
          shift() – extracts an item from the beginning,
          unshift(...items) – adds items to the beginning.
          splice(pos, deleteCount, ...items) – at index pos delete deleteCount elements and insert items, returns deleted item array but if any item inserted then return whole array with new items.
          slice(start, end) – creates a new array, copies elements from position start till end (not inclusive) into it.
          concat(...items) – returns a new array: copies all members of the current one and adds items to it. If any of items is an array, then its elements are taken.

        To search among elements:
          indexOf/lastIndexOf(item, pos) – look for item starting from position pos, return the index or -1 if not found.
          includes(value) – returns true if the array has value, otherwise false.
          find/filter(func) – filter elements through the function, return first/all values that make it return true.
          findIndex is like find, but returns the index instead of a value.

        To iterate over elements:
          forEach(func) – calls func for every element, does not return anything.

        To transform the array:
          map(func) – creates a new array from results of calling func for every element.
          sort(func) – sorts the array in-place, then returns it.
          reverse() – reverses the array in-place, then returns it.
          split/join – convert a string to array and back.
          reduce(func, initial) – calculate a single value over the array by calling func for each element and passing an intermediate result between the calls.

        Additionally:
          Array.isArray(arr) checks arr for being an array.

        Please note that methods sort, reverse and splice modify the array itself.

        These methods are the most used ones, they cover 99% of use cases. But there are few others:
          - arr.some(fn)/arr.every(fn) checks the array.
              The function fn is called on each element of the array similar to map. If any/all results are true, returns true,
              otherwise false.
          - arr.fill(value, start, end) – fills the array with repeating value from index start to end.
          - arr.copyWithin(target, start, end) – copies its elements from position start till position end into itself, at position
            target (overwrites existing).
