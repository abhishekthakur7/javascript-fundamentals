1. Hello world:

- We can use a <script> tag to add JavaScript code to a page.
- The type and language attributes are not required in HTML 5

- A script in an external file can be inserted with <script src="path/to/script.js"></script>.
    - The benefit of a separate file is that the browser will download it and store it in its cache.
    - Other pages that reference the same script will take it from the cache instead of downloading it, so the file is actually downloaded only once.
    - That reduces traffic and makes pages faster.

---------------------------------------xxxxxxxxxxx-----------------------------------------------
2. Code structure

- A semicolon may be omitted in most cases when a line break exists.
  However:::
    Compiler will fail to auto assume semi colon in case of:
        alert("There will be an error")
        [1, 2].forEach(alert)
    Because, JS don't auto assume semicolon before []

- Nested comments are not supported!
  There may not be /*...*/ inside another /*...*/.
  Such code will die with an error.

-----------------------------------------xxxxxxxxxxx-----------------------------------------------
3. Use strict --> To keep the old code working, most modifications are off by default. 
                  You need to explicitly enable them with a special directive: "use strict".

- The directive looks like a string: "use strict" or 'use strict'. 
  When it is located at the top of a script, the whole script works the “modern” way.

- "use strict" can be put at the start of most kinds of functions instead of the whole script. 
   Doing that enables strict mode in that function only. But usually, people use it for the whole script.
      - Please make sure that "use strict" is at the top of your scripts, otherwise strict mode may not be enabled.
      - Only comments may appear above "use strict".

- There’s no way to cancel use strict
  There is no directive like "no use strict" that reverts the engine to old behavior.
  Once we enter strict mode, there’s no return.

- Browser console
  For the future, when you use a browser console to test features, please note that it 
  doesn’t use strict by default.
  Even if we press Shift+Enter to input multiple lines, and put use strict on top, it doesn’t work. 
  That’s because of how the console executes the code internally.
  The reliable way to ensure use strict would be to input the code into console like this:

  (function() {
  'use strict';
    // ...your code...
  })()

- Several language features, like “classes” and “modules”, enable strict mode automatically.
  Strict mode is supported by all modern browsers.

-------------------------------------------xxxxxxxxxxx---------------------------------------------

4. Variables

- To create a variable in JavaScript, use the 'let' keyword.
- let – is a modern variable declaration. The code must be in strict mode to use let in Chrome (V8).
- In older scripts, you may also find another keyword: var instead of let
- The var keyword is almost the same as let. It also declares a variable, but in a slightly different, “old-school” way.

-- Functional languages
   - It’s interesting to note that functional programming languages, like Scala or Erlang, forbid changing 
     variable values.
   - In such languages, once the value is stored “in the box”, it’s there forever. If we need to store 
     something else, the language forces us to create a new box (declare a new variable). We can’t reuse the old one.
   - Though it may seem a little odd at first sight, these languages are quite capable of serious development.
     More than that, there are areas like parallel computations where this limitation confers certain 
     benefits. Studying such a language (even if you’re not planning to use it soon) is recommended to 
     broaden the mind.

- There are two limitations on variable names in JavaScript:
  1. The name must contain only letters, digits, or the symbols $ and _.
  2. The first character must not be a digit.

- When the name contains multiple words, camelCase is commonly used.
- Case Sensitive - Variables named apple and AppLE are two different variables.

- Reserved keywords - which cannot be used as variables
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords

- Variable declaration - Normally, we need to define a variable before using it. But in the old times, it was technically possible 
  to create a variable by a mere assignment of the value without using let. This still works now if we don’t
  put use strict in our scripts to maintain compatibility with old scripts.

- To declare a constant (unchanging) variable, use const instead of let
     - Capital-named constants are only used as aliases for “hard-coded” values.

--------------------------------------------------xxxxxxxxxxx------------------------------------------------------
5. DataTypes

- Besides regular numbers, there are so-called “special numeric values” which also belong to this 
  data type: Infinity, -Infinity and NaN
     - 'Infinity' -> represents the mathematical Infinity ∞. It is a special value that’s greater than any number.
     - 'NaN' -> (Full form "Not a Number") represents a computational error. It's type is "number". It is a result of an incorrect or an undefined mathematical operation, for instance:
            alert( "not a number" / 2 ); // NaN, such division is erroneous

- A string in JavaScript must be surrounded by quotes.
      In JavaScript, there are 3 types of quotes.
      - Double quotes: "Hello".
      - Single quotes: 'Hello'.
      - Backticks: `Hello`.

      Backticks are “extended functionality” quotes. They allow us to embed variables and expressions into a 
      string by wrapping them in ${…}, for example:

      let name = "John";
      // embed a variable
      alert( `Hello, ${name}!` ); // Hello, John!

- In JavaScript, 'null' is not a “reference to a non-existing object” or a “null pointer” like in some other 
  languages. It’s just a "special value" which represents “nothing”, “empty” or “value unknown”.

- The special value 'undefined' also stands apart. It "makes a type of its own", just like null.
  The meaning of undefined is “value is not assigned”.
  If a variable is declared, but not assigned, then its value is undefined:
  let x;
  alert(x); // shows "undefined"

- Technically, it is possible to assign undefined to any variable. But we don’t recommend doing that. 
  Normally, we use null to assign an “empty” or “unknown” value to a variable, and we use undefined for 
  checks like seeing if a variable has been assigned.


- The object type is special.
  All other types (number, String, boolean) are called “primitive” because their values can contain only a single thing (be it a string or a number or 
  whatever). In contrast, objects are used to store collections of data and more complex entities.

- The 'symbol' type is used to create unique identifiers for objects.

- The typeof operator returns the type of the argument. It’s useful when we want to process values of different types differently or just want to do a quick check.
      - It supports two forms of syntax:
          - As an operator: typeof x.
          - As a function: typeof(x).
  In other words, it works with parentheses or without them. The result is the same.
  The call to typeof x returns a string with the type name:
  
  *TIP:
  Normally typeof [] returns "object" for all object types which is almost useless information. A better typeof:
  const objType = obj => Object.prototype.toString.call(obj);
  Use like this:
  objType([]); // returns "[object Array]"

  typeof undefined // "undefined"
  typeof 0 // "number"
  typeof true // "boolean"
  typeof "foo" // "string"
  typeof Symbol("id") // "symbol"
  typeof Math // "object"
  typeof arguments //"object"
  typeof undefined //"undefined"
  typeof NaN //"number" ************ use isNaN(value) to check if some value is NaN or not
  typeof null // "object"
  typeof alert // "function"

  **Important explanations for last 2:
     --> The result of typeof null is "object". That’s wrong. It is an officially recognized error in typeof, kept for 
         compatibility. Of course, null is not an object. It is a special value with a separate type of its own. 
         So, again, this is an error in the language.
    
     --> The result of typeof alert is "function", because alert is a function of the language. We’ll study functions in 
         the next chapters where we’ll see that there’s no special “function” type in JavaScript. Functions belong to the 
         object type. But typeof treats them differently. Formally, it’s incorrect, but very convenient in practice.

- Summary ::::
  There are 7 basic types in JavaScript.

  1. "number" for numbers of any kind: integer or floating-point.
  2. "string" for strings. A string may have one or more characters, there’s no separate single-character type.
  3. "boolean" for true/false.
  4. "null" for unknown values – a standalone type that has a single value null.
  5. "undefined" for unassigned values – a standalone type that has a single value undefined.
  6. "object" for more complex data structures.
  7. "symbol" for unique identifiers.

  The typeof operator allows us to see which type is stored in a variable.
    - Two forms: typeof x or typeof(x).
    - Returns a string with the name of the type, like "string".
    - For null returns "object" – this is an error in the language, it’s not actually an object.

------------------------------------------------------xxxxxxxxxxx---------------------------------------
6. Type Conversions

- ToString:::::
   - We can call the "String(value)" function to convert a value to a string:
        value = String(value); // now value is a string "true"
        alert(typeof value); // string

   *** String conversion is mostly obvious. A false becomes "false", null becomes "null", etc.
    
- ToNumber:::::
   - Numeric conversion happens in mathematical functions and expressions automatically.
     For example:
         - alert( "6" / "2" ); // 3, strings are converted to numbers
   
    - We can use the "Number(value)" function to explicitly convert a value to a number:
      let str = "123";
      alert(typeof str); // string
      let num = Number(str); // becomes a number 123
      alert(typeof num); // number

    - Explicit conversion is usually required when we read a value from a string-based source like a 
      text form but expect a number to be entered.
      If the string is not a valid number, the result of such a conversion is NaN. For instance:
      let age = Number("an arbitrary string instead of a number");
      alert(age); // NaN, conversion failed

    *** Numeric conversion rules:
        Value	Becomes…
        undefined       -->	NaN
        null            -->	0
        true and false 	--> 1 and 0
        string          --> Whitespaces from the start and end are removed. If the remaining string is 
                            empty, the result is 0. Otherwise, the number is “read” from the string. 
                            An error gives NaN.

        Examples:
            alert( Number("   123   ") ); // 123
            alert( Number("123z") );      // NaN (error reading a number at "z")
            alert( Number(true) );        // 1
            alert( Number(false) );       // 0

    *** TIP::::
        - Almost all mathematical operations convert values to numbers. A notable exception is addition +. 
          If one of the added values is a string, the other one is also converted to a string. 
          Example:
          alert ( 1 + '2' ); //12

- ToBoolean::::::
   - Can be performed with "Boolean(value)".
     Follows the rules:
     Value	Becomes…
     0, null, undefined, NaN, ""                                             ----->	false
     any other value (number +ve or -ve/non empty string/space-only string)	 -----> true

-- SUMMARY:
    -> true + false;  //1
    -> "" + 1 + 0;    //10
    -> "" - 1 + 0;    //-1
    -> 4 + 5 + "px";  //45px
    -> "$" + 4 + 5;   //$45
    -> "4px" - 2;     //NaN - It will fail to convert 4px to Number
    -> "  -9  " + 5;  //"  -9  5"
    -> null + 1;      //1 - Because null is 0 in terms of numbers
    -> undefined + 1; //NaN - Because undefined is NaN in terms of numbers
    -> '2'+'2'-'2';   //20 - '22' - '2' = 20
    -> true+1;        //2 - true is converted to number i.e. 1
    -> "-9\n" + 5;    //"-9\n5"
    -> "-9\n"-5;      //-14 - \n is new line character, and after evaluating it will become like:
                         "-9"
                         -5
                         Which is same as "-9"-5 for JS, so result is -14

-------------------------------------------------xxxxxxxxxxx---------------------------------------------

7. Operators

- The plus + exists in two forms: the binary form that we used above and the unary form.
  The unary plus or, in other words, the plus operator + applied to a single value, doesn’t do anything 
  to numbers. But if the operand is not a number, the unary plus converts it into a number.

  For example:
  // No effect on numbers
  let x = 1;
  alert( +x ); // 1

  let y = -2;
  alert( +y ); // -2

  // Converts non-numbers
  alert( +true ); // 1
  alert( +"" );   // 0

- It actually does the same thing as Number(...), but is shorter.

- Operator precedence:::
     - BODMAS
     - Parentheses override any precedence, so if we’re not satisfied with the implicit order,
       we can use them to change it. For example: (1 + 2) * 2.
  
  *** The “unary plus” has a priority of 16 which is higher than the 13 of “addition” (binary plus). 
     That’s why, in the expression "+apples + +oranges", unary pluses work before the addition.

    - Let’s note that an assignment = is also an operator. It is listed in the precedence table with the 
      very low priority of 3.
           -  An operator always returns a value. That’s obvious for most of them like addition + or 
              multiplication *. But the assignment operator follows this rule too.
              The call x = value writes the value into x and then returns it.
              For example:
              let a = 1;
              let b = 2;
              let c = 3 - (a = b + 1); 
              alert( a ); // 3
              alert( c ); // 0

  - Important:
       - Increment/decrement can only be applied to variables. Trying to use it on a value like 5++ will
         give an error.

 - Modify-and-assign operator:
    operators exist for all arithmetical and bitwise operators: /=, -=, etc.
    Such operators have the same precedence as a normal assignment, so they run after most other calculations:
    let n = 2;
    n *= 3 + 5;
    alert( n ); // 16  (right part evaluated first, same as n *= 8)

 - Comma Operator:
     - The comma operator , is one of the rarest and most unusual operators. Sometimes, it’s used to write 
       shorter code, so we need to know it in order to understand what’s going on.
       The comma operator allows us to evaluate several expressions, dividing them with a comma ,.
       Each of them is evaluated but only the result of the last one is returned.
       For example:
        - let a = (1 + 2, 3 + 4);
        - alert( a ); // 7 (the result of 3 + 4)
        Here, the first expression 1 + 2 is evaluated and its result is thrown away. Then, 3 + 4 is 
        evaluated and returned as the result.
      
      **Comma has a very low precedence
          - Please note that the comma operator has very low precedence, lower than =, so parentheses are 
            important in the example above.
          - Without them: a = 1 + 2, 3 + 4 evaluates + first, summing the numbers into a = 3, 7, then the
            assignment operator = assigns a = 3, and finally the number after the comma, 7, is not processed
            so it’s ignored.

          - Why do we need an operator that throws away everything except the last part?
            Sometimes, people use it in more complex constructs to put several actions in one line.
            For example:
              - // three operations in one line
                for (a = 1, b = 3, c = a * b; a < 10; a++) {
                ...
                }

--------------------------------------------------xxxxxxxxxxx---------------------------------------------------