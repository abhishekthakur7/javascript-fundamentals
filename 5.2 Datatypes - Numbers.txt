--> Numbers in JS are stored in 64-bit format IEEE-754, also known as "double precision floating point numbers"

	In JavaScript, we shorten a number by appending the letter "e" to the number and specifying the zeroes count:

		let billion = 1e9;  // 1 billion, literally: 1 and 9 zeroes
		alert( 7.3e9 );  // 7.3 billions (7,300,000,000)
		
		Now let’s write something very small. Say, 1 microsecond (one millionth of a second):

		let ms = 0.000001;
		
		Just like before, using "e" can help. If we’d like to avoid writing the zeroes explicitly, we could say:

		let ms = 1e-6; // six zeroes to the left from 1
		
		
	--> Hexadecimal numbers are widely used in JavaScript to represent colors, encode characters, and for many other things. 
	   So naturally, there exists a shorter way to write them: 0x and then the number.

		For instance:

		alert( 0xff ); // 255
		alert( 0xFF ); // 255 (the same, case doesn't matter)
		
	--> Binary and octal numeral systems are rarely used, but also supported using the 0b and 0o prefixes:

		 let a = 0b11111111; // binary form of 255
		 let b = 0o377; // octal form of 255

		 alert( a == b ); // true, the same number 255 at both sides
		 
	** There are only 3 numeral systems with such support. For other numeral systems, we should use the function "parseInt"
	  (which we will see later in this chapter).
	  
	  
	--> toString(base):
	
			The method num.toString(base) returns a string representation of num in the numeral system with the given base.

			For example:

			let num = 255;
			alert( num.toString(16) );  // ff
			alert( num.toString(2) );   // 11111111
			
		** The base can vary from 2 to 36. By default it’s 10.
		
		** Also, if we want to apply toString() on literal then:
		
			"Two dots to call a method"
				e.g. alert( 123456..toString(36) ); // 2n9c
				
			Because If we placed a single dot: 123456.toString(36), then there would be an error, because JavaScript syntax 
			implies the decimal part after the first dot. And if we place one more dot, then JavaScript knows that the decimal 
			part is empty and now goes the method.

			"Also could write (123456).toString(36)."
			
	--> Rounding:
	
			One of the most used operations when working with numbers is rounding.

			There are several built-in functions for rounding:

			Math.floor
				Rounds down: 3.1 becomes 3, and -1.1 becomes -2.
				
			Math.ceil
				Rounds up: 3.1 becomes 4, and -1.1 becomes -1.
				
			Math.round
				Rounds to the nearest integer: 3.1 becomes 3, 3.6 becomes 4 and -1.1 becomes -1.
				
			Math.trunc (not supported by Internet Explorer)
				Removes anything after the decimal point without rounding: 3.1 becomes 3, -1.1 becomes -1.
				
			** Round the number to n-th digit after the decimal:
			
					Method toFixed(n) rounds the number to n digits after the point and returns a string representation of the result.
						let num = 12.34;
						alert(num.toFixed(1) ); // "12.3"
					
					This rounds up or down to the nearest value, similar to Math.round:
						let num = 12.36;
						alert(num.toFixed(1) ); // "12.4"
						
					Please note that result of toFixed is a string. If the decimal part is shorter than required, zeroes are 
					appended to the end:

					let num = 12.34;
					alert( num.toFixed(5) ); // "12.34000", added zeroes to make exactly 5 digits
					
					We can convert it to a number using the unary plus or a Number() call: +num.toFixed(5).
					
					
	--> Imprecise calculations:
			Internally, a number is represented in 64-bit format IEEE-754, so there are exactly 64 bits to store a number: 52 
			of them are used to store the digits, 11 of them store the position of the decimal point (they are zero for 
			integer numbers), and 1 bit is for the sign.

			If a number is too big, it would overflow the 64-bit storage, potentially giving an infinity:

			alert( 1e500 ); // Infinity
			
		** What may be a little less obvious, but happens quite often, is the loss of precision.

			Consider this (falsy!) test:

			alert( 0.1 + 0.2 == 0.3 ); // false
			
			Strange! What is it then if not 0.3?

			alert( 0.1 + 0.2 ); // 0.30000000000000004
			
			But why does this happen?

			A number is stored in memory in its binary form, a sequence of bits – ones and zeroes. But fractions like 0.1, 0.2 
			that look simple in the decimal numeric system are actually unending fractions in their binary form.
			
			The numeric format IEEE-754 solves this by rounding to the nearest possible number. These rounding rules normally 
			don’t allow us to see that “tiny precision loss”, so the number shows up as 0.3. But beware, the loss still exists.

			We can see this in action:

			alert( 0.1.toFixed(20) ); // 0.10000000000000000555
			
			And when we sum two numbers, their “precision losses” add up.

			That’s why 0.1 + 0.2 is not exactly 0.3.
			
		 ** Can we work around the problem? Sure, the most reliable method is to round the result with the help of a method 
			toFixed(n):

			let sum = 0.1 + 0.2;
			alert( sum.toFixed(2) ); // 0.30
			
		** Another funny consequence of the internal representation of numbers is the existence of two zeroes: 0 and -0.
		   That’s because a sign is represented by a single bit, so every number can be positive or negative, including a zero.
		   In most cases the distinction is unnoticeable, because operators are suited to treat them as the same.
			
	--> Tests: isFinite and isNaN:
			Remember these two special numeric values?

			Infinity (and -Infinity) is a special numeric value that is greater (less) than anything.
			NaN represents an error.
			They belong to the type number, but are not “normal” numbers, so there are special functions to check for them:

		 ** isNaN(value) converts its argument to a number and then tests it for being NaN:
			alert( isNaN(NaN) ); // true
			alert( isNaN("str") ); // true
			
			But do we need this function? Can’t we just use the comparison === NaN? Sorry, but the answer is no. The value NaN 
			is unique in that it does not equal anything, including itself:

			alert( NaN === NaN ); // false
			
		 ** isFinite(value) converts its argument to a number and returns true if it’s a regular number, not NaN/Infinity/-Infinity:
			alert( isFinite("15") ); // true
			alert( isFinite("str") ); // false, because a special value: NaN
			alert( isFinite(Infinity) ); // false, because a special value: Infinity
			
			Sometimes isFinite is used to validate whether a string value is a regular number:

			let num = +prompt("Enter a number", '');

			// will be true unless you enter Infinity, -Infinity or not a number
			alert( isFinite(num) );
			
			Please note that an empty or a space-only string is treated as 0 in all numeric functions including "isFinite".
			
		*** Compare with Object.is:
		
				There is a special built-in method "Object.is" that compares values like ===, but is more reliable for two 
				edge cases:

				1. It works with NaN: Object.is(NaN, NaN) === true, that’s a good thing.
				2. Values 0 and -0 are different: Object.is(0, -0) === false, technically that’s true, because internally the number has a sign bit that may be different even if all other bits are zeroes.
				
				In all other cases, Object.is(a, b) is the same as a === b.

				This way of comparison is often used in JavaScript specification. When an internal algorithm needs to compare 
				two values for being exactly the same, it uses Object.is (internally called "SameValue" (https://tc39.github.io/ecma262/#sec-samevalue)).
				
				
	--> parseInt and parseFloat:
	
			Numeric conversion using a plus + or Number() is strict. If a value is not exactly a number, it fails:
				alert( +"100px" ); // NaN
				
			The sole exception is spaces at the beginning or at the end of the string, as they are ignored.

			But in real life we often have values in units, like "100px" or "12pt" in CSS. Also in many countries the currency 
			symbol goes after the amount, so we have "19€" and would like to extract a numeric value out of that.

			That’s what parseInt and parseFloat are for.

			They “read” a number from a string until they can’t. In case of an error, the gathered number is returned. 
			The function parseInt returns an integer, whilst parseFloat will return a floating-point number:

			alert( parseInt('100px') ); // 100
			alert( parseFloat('12.5em') ); // 12.5

			alert( parseInt('12.3') ); // 12, only the integer part is returned
			alert( parseFloat('12.3.4') ); // 12.3, the second point stops the reading
			
			There are situations when parseInt/parseFloat will return NaN. It happens when no digits could be read:

			alert( parseInt('a123') ); // NaN, the first symbol stops the process
			
	--> Other math functions:
			
			1. Math.random()
					Returns a random number from 0 to 1 (not including 1)
					
			2. Math.max(a, b, c...) / Math.min(a, b, c...)
					Returns the greatest/smallest from the arbitrary number of arguments.
					
			3. Math.pow(n, power)
					Returns n raised the given power
					
			For rest of the Math library methods: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math
			
	
	*** GOTCHA 1:
			
			let a = +prompt("The first number?", ""); //2
			let b = +prompt("The second number?", ""); //3

			alert( a + b ); //5
			
			Note the "unary plus + before prompt". It immediately converts the value to a number.

			Otherwise, a and b would be string their sum would be their concatenation, that is: "2" + "3" = "23".
			
	*** GOTCHA 2:
	
			why is 6.35 rounded to 6.3, not 6.4?

			alert( 6.35.toFixed(1) ); // 6.3
			
			How to round 6.35 the right way?
			
			Solution:
			
			Internally the decimal fraction 6.35 is an endless binary. As always in such cases, it is stored with a precision loss.
			Let’s see:

			alert( 6.35.toFixed(20) ); // 6.34999999999999964473
			
			How can we fix the problem with 6.35 if we want it to be rounded the right way?

			We should bring it closer to an integer prior to rounding:

			alert( (6.35 * 10).toFixed(20) ); // 63.50000000000000000000
			
			Note that 63.5 has no precision loss at all. That’s because the decimal part 0.5 is actually 1/2. Fractions divided 
			by powers of 2 are exactly represented in the binary system, now we can round it:

			alert( Math.round(6.35 * 10) / 10); // 6.35 -> 63.5 -> 64(rounded) -> 6.4
			
			
	*** GOTCHA 3:
			Evade equality checks when working with decimal fractions, because of the precision losses when adding fractions like 0.2.
			
			
			
