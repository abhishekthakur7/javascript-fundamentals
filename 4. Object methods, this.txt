-- Objects are usually created to represent entities of the real world, like users, orders and so on:

		let user = {
		  name: "John",
		  age: 30
		};
		
	--> Method shorthand:
	
		There exists a shorter syntax for methods in an object literal:

		// these objects do the same

		let user = {
		  sayHi: function() {
			alert("Hello");
		  }
		};

		// method shorthand looks better, right?
		let user = {
		  sayHi() { // same as "sayHi: function()"
			alert("Hello");
		  }
		};
		
	--> “this” in methods:
			For instance, the code inside user.sayHi() may need the name of the user.
			To access the object, a method can use the this keyword.
			The value of this is the object “before dot”, the one used to call the method.
			For instance:

			let user = {
			  name: "John",
			  age: 30,
			  sayHi() {
				alert(this.name);
			  }
			};

			user.sayHi(); // John
			
			** Technically, it’s also possible to access the object without this, by referencing it via
			   the outer variable:
			   
				 sayHi() {
					alert(user.name);
				  }
				  
				HOWEVER, But such code is unreliable. If we decide to copy user to another variable, e.g. admin = user and overwrite user with something else, then it will access the wrong object.
				For example:
				
				  let user = {
				  name: "John",
				  age: 30,
				  sayHi() {
					alert( user.name ); // leads to an error
				  }

				};

				let admin = user;
				user = null; // overwrite to make things obvious
				admin.sayHi(); // Whoops! inside sayHi(), the old name is used! error!
				
				++ If we used this.name instead of user.name inside the alert, then the code would work.
				
	--> “this” is not bound:
			The value of this is evaluated during the run-time. And it can be anything.
			For instance, the same function may have different “this” when called from different objects:

			let user = { name: "John" };
			let admin = { name: "Admin" };

			function sayHi() {
			  alert( this.name );
			}

			// use the same functions in two objects
			user.f = sayHi;
			admin.f = sayHi;

			// these calls have different this
			// "this" inside the function is the object "before the dot"
			user.f(); // John  (this == user)
			admin.f(); // Admin  (this == admin)

			admin['f'](); // Admin (dot or square brackets access the method – doesn't matter)
			
			** Actually, we can call the function without an object at all:

				 function sayHi() {
				  alert(this);
				}
				sayHi(); // undefined
				
				- In this case this is undefined in "strict" mode. If we try to access this.name, there will be an error.

				- In non-strict mode the value of this in such case will be the global object (window in a browser). This is a historical behavior that "use strict" fixes.
				
			** usually a call of a function that uses this without an object is not normal, but rather a 		   programming mistake. If a function has this, then it is usually meant to be called in the context of an object.	
			
	--> Internals: Reference Type:
	
			An intricate method call can lose "this", for instance:

			let user = {
			  name: "John",
			  hi() { alert(this.name); },
			  bye() { alert("Bye"); }
			};

			user.hi(); // John (the simple call works)

			// now let's call user.hi or user.bye depending on the name
			(user.name == "John" ? user.hi : user.bye)(); // Error!
			
			** Any operation on it except a method call (like assignment = or ||) turns it into an ordinary value, which does not carry the information allowing to set "this".
			
			- Why? If we want to understand why it happens, let’s get under the hood of how obj.method() call works.
				Looking closely, we may notice two operations in obj.method() statement:

				First, the dot '.' retrieves the property obj.method.
				Then parentheses () execute it.
				So, how does the information about "this" get passed from the first part to the second one?
				If we put these operations on separate lines, then "this" will be lost for sure:

				let user = {
				  name: "John",
				  hi() { alert(this.name); }
				}
				// split getting and calling the method in two lines
				let hi = user.hi;
				hi(); // Error, because this is undefined
				
				Here hi = user.hi puts the function into the variable, and then on the last line it is completely standalone, and so there’s no "this".

				To make user.hi() calls work, JavaScript uses a trick – the dot '.' returns not a function, but a value of the special "Reference Type".

				The Reference Type is a “specification type”. We can’t explicitly use it, but it is used internally by the language.

				The value of Reference Type is a three-value combination (base, name, strict), where:

				"base" is the object.
				"name" is the property.
				"strict" is true if use strict is in effect.
				The result of a property access user.hi is not a function, but a value of Reference Type. For user.hi in strict mode it is:

				// Reference Type value
				(user, "hi", true)
				** When parentheses () are called on the Reference Type, they receive the full information about the object and its method, and can set the right "this" (=user in this case).

				** Any other operation like assignment hi = user.hi discards the reference type as a whole, takes the value of user.hi (a function) and passes it on. So any further operation “loses” this.

				So, as the result, the value of this is only passed the right way if the function is called directly using a dot obj.method() or square brackets obj['method']() syntax (they do the same here).
				
	--> Arrow functions have no “this”:
	
			Arrow functions are special: they don’t have their “own” this. If we reference this from such a function, it’s taken from the outer “normal” function.

			For instance, here arrow() uses this from the outer user.sayHi() method:

			 let user = {
			  firstName: "Ilya",
			  sayHi() {
				let arrow = () => alert(this.firstName);
				arrow();
			  }
			};
			user.sayHi(); // Ilya
			
			That’s a special feature of arrow functions, it’s useful when we actually do not want to have a separate this, but rather to take it from the outer context.
			
			
	--> SUMMARY:
			- Functions that are stored in object properties are called “methods”.
			- Methods allow objects to “act” like object.doSomething().
			- Methods can reference the object as this.
			
			- The value of this is defined at run-time.
				 - When a function is declared, it may use this, but that this has no value until the function is called.
				 - That function can be copied between objects.
			     - When a function is called in the “method” syntax: object.method(), the value of this during the  call is object.
			