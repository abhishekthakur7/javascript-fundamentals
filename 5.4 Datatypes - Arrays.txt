--> Arrays:

		Objects allow you to store keyed collections of values. That’s fine.

		But quite often we find that we need an ordered collection, where we have a 1st, a 2nd, a
		3rd element and so on. For example, we need that to store a list of something: users, goods,
		HTML elements etc.

		There exists a special data structure named "Array", to store ordered collections.

	--> Declaration:

			There are two syntaxes for creating an empty array:

			let arr = new Array();
			let arr = [];

			Almost all the time, the second syntax is used. We can supply initial elements in the brackets:

			let fruits = ["Apple", "Orange", "Plum"];

			We can get an element by its number in square brackets:
				let fruits = ["Apple", "Orange", "Plum"];
				alert( fruits[0] ); // Apple
				alert( fruits[1] ); // Orange
				alert( fruits[2] ); // Plum

			We can replace an element:
				fruits[2] = 'Pear'; // now ["Apple", "Orange", "Pear"]

			…Or add a new one to the array:
				fruits[3] = 'Lemon'; // now ["Apple", "Orange", "Pear", "Lemon"]

			The total count of the elements in the array is its length:
				let fruits = ["Apple", "Orange", "Plum"];
				alert( fruits.length ); // 3

	--> An array can store elements of any type.
			For instance:

			 // mix of values
			let arr = [ 'Apple', { name: 'John' }, true, function() { alert('hello'); } ];
			// get the object at index 1 and then show its name
			alert( arr[1].name ); // John
			// get the function at index 3 and run it
			arr[3](); // hello

			** Trailing comma
					An array, just like an object, may end with a comma:
					  let fruits = [
					  "Apple",
					  "Orange",
					  "Plum",
					];
					The “trailing comma” style makes it easier to insert/remove items, because all lines become alike.

	--> Methods pop/push, shift/unshift:

				- A "queue" is one of the most common uses of an array. In computer science, this means an ordered collection of elements which
					supports two operations:
							- "push" appends an element to the end.
							- "shift" get an element from the beginning, advancing the queue, so that the 2nd element becomes the 1st.
			  - There’s another use case for arrays – the data structure named "stack".
					It supports two operations:
						- push adds an element to the end.
						- pop takes an element from the end.


				- Arrays in JavaScript can work both as a queue and as a stack. They allow you to add/remove elements both to/from the beginning or
					the end.
				  In computer science the data structure that allows it is called "deque".

					Methods that work with the end of the array:
							1. pop:
										Extracts the last element of the array and returns it:
										let fruits = ["Apple", "Orange", "Pear"];
										alert( fruits.pop() ); // remove "Pear" and alert it
										alert( fruits ); // Apple, Orange

							2. push:
										Append the element to the end of the array:
										let fruits = ["Apple", "Orange"];
										fruits.push("Pear", "Peach");
										alert( fruits ); // Apple, Orange, Pear, Peach

					Methods that work with the beginning of the array:
							3. shift:
										Extracts the first element of the array and returns it:
										let fruits = ["Apple", "Orange", "Pear"];
										alert( fruits.shift() ); // remove Apple and alert it
										alert( fruits ); // Orange, Pear
							4. unshift:
										Add the element to the beginning of the array:
										let fruits = ["Orange", "Pear"];
										fruits.unshift('Apple', 'Banana');
										alert( fruits ); // Apple, Banana, Orange, Pear

		--> Array Internals:

					- An array is a special kind of object. The square brackets used to access a property arr[0] actually come from the object syntax.
					-	They extend objects providing special methods to work with ordered collections of data and also the length property. But at the
					  core it’s still an object.
						For instance, it is copied by reference:
								let fruits = ["Banana"]
								let arr = fruits; // copy by reference (two variables reference the same array)
								alert( arr === fruits ); // true
								arr.push("Pear"); // modify the array by reference
								alert( fruits ); // Banana, Pear - 2 items now

					- …But what makes arrays really special is their internal representation. The engine tries to store its elements in the contiguous
					  memory area, one after another, just as depicted on the illustrations in this chapter, and there are other optimizations as well,
						to make arrays work really fast.
				 ** But they all break if we quit working with an array as with an “ordered collection” and start working with it as if it were a
				    regular object.
						For instance, technically we can do this:
								let fruits = []; // make an array
								fruits[99999] = 5; // assign a property with the index far greater than its length
								fruits.age = 25; // create a property with an arbitrary name
								That’s possible, because arrays are objects at their base. We can add any properties to them.

						But the engine will see that we’re working with the array as with a regular object. Array-specific optimizations are not suited for
						such cases and will be turned off, their benefits disappear.

			 	** Please think of arrays as special structures to work with the ordered data. They provide special methods for that. Arrays are
				   carefully tuned inside JavaScript engines to work with contiguous ordered data, please use them this way. And if you need arbitrary
					 keys, chances are high that you actually require a regular object {}.

	 --> Performance:

	 					Methods push/pop run fast, while shift/unshift are slow.
						The more elements in the array, the more time to move them, more in-memory operations. (For shift/unshift operation)

	-->  Loops:

					One of the oldest ways to cycle array items is the for loop over indexes: works fastest, old-browser-compatible.
							let arr = ["Apple", "Orange", "Pear"];
							for (let i = 0; i < arr.length; i++) {
								alert( arr[i] );
							}
					But for arrays there is another form of loop, for..of:
							let fruits = ["Apple", "Orange", "Plum"];
							// iterates over array elements
							for (let fruit of fruits) {
								alert( fruit );
							}

					** Technically, because arrays are objects, it is also possible to use for..in:
							let arr = ["Apple", "Orange", "Pear"];
							for (let key in arr) {
							  alert( arr[key] ); // Apple, Orange, Pear
							}
							However, we shouldn’t use for..in for arrays. The for..in loop is optimized for generic objects, not arrays, and thus is
							10-100 times slower. Of course, it’s still very fast.

	 --> A word about “length”:

	 			*** The length property automatically updates when we modify the array. To be precise, it is actually not the count of values in
						the array, but the greatest numeric index plus one.

						For instance, a single element with a large index gives a big length:
								let fruits = [];
								fruits[123] = "Apple";
								alert( fruits.length ); // 124
						Note that we usually don’t use arrays like that.

						Another interesting thing about the length property is that it’s writable.

						If we increase it manually, nothing interesting happens. But if we decrease it, the array is truncated.
						The process is irreversible, here’s the example:

						let arr = [1, 2, 3, 4, 5];
						arr.length = 2; // truncate to 2 elements
						alert( arr ); // [1, 2]
						arr.length = 5; // return length back
						alert( arr[3] ); // undefined: the values do not return

				*** So, the simplest way to clear the array is: arr.length = 0;.

	 --> new Array():

	 					There is one more syntax to create an array:
								let arr = new Array("Apple", "Pear", "etc");
						It’s rarely used, because square brackets [] are shorter. Also there’s a tricky feature with it.
						If new Array is called with a single argument which is a number, then it creates an array without items, but with the given length.

						Let’s see how one can shoot themself in the foot:
 								let arr = new Array(2); // will it create an array of [2] ?
								alert( arr[0] ); // undefined! no elements.
								alert( arr.length ); // length 2

						In the code above, new Array(number) has all elements undefined.
						To evade such surprises, we usually use square brackets, unless we really know what we’re doing.

	--> Multidimensional arrays:

						Arrays can have items that are also arrays. We can use it for multidimensional arrays, for example to store matrices:

								let matrix = [
								[1, 2, 3],
								[4, 5, 6],
								[7, 8, 9]
								];
								alert( matrix[1][1] ); //5, the central element

	--> toString:

						Arrays have their own implementation of toString method that returns a comma-separated list of elements.

						For instance:
								let arr = [1, 2, 3];
								alert( arr ); // 1,2,3
								alert( String(arr) === '1,2,3' ); // true

						Also, let’s try this:
								alert( [] + 1 ); // "1"
								alert( [1] + 1 ); // "11"
								alert( [1,2] + 1 ); // "1,21"

						Arrays do not have Symbol.toPrimitive, neither a viable valueOf, they implement only toString conversion, so here [] becomes an
						empty string, [1] becomes "1" and [1,2] becomes "1,2".

						When the binary plus "+" operator adds something to a string, it converts it to a string as well, so the next step looks
						like this:

						alert( "" + 1 ); // "1"
						alert( "1" + 1 ); // "11"
						alert( "1,2" + 1 ); // "1,21"
